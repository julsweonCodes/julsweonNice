### Next.js
: React 기반의 웹 프레임워크 (프론트)
서버 사이드 렌더링
정적 사이트 생성 
API 라우팅 및 파일 시스템 기분의 라우팅
=> 개발자가 보다 효율적으로 웹 앱을 개발할 수 있도록 도움

### Nest.js
: 백엔드 애플리케이션 개발을 위한 프레임워크 
TypeScript와 JavaScript 사용하여 구축 가능
애플리케이션의 구성 요소 제공하여 앱을 조직화하고 효율적인 코드 작성을 도움
 ㄴ 모듈, 컨트롤러, 서비스 등을 사용하여 응용 프로그램을 구성하고 지원함
주로 서버 개발에 사용됨


### Node.js
: JavaScript 런타임 환경
서버 애플리케이션 개발에 사용됨
Chrome V8 JavaScript 엔진 위에 구축되어 있음
비동기식 이벤트 기반의 서버 측 JavaScript 코드를 실행할 수 있게 함
웹 서버, 파일 시스템과의 인터페이스, DB작업 수행
=> 이벤트 기반의 프로그래밍 모델을 사용하여 I/O 작업 효율적으로 처리할 수 있도록 지원

: NodeJS의 등장으로 자바스크립트가 빠르게 발전. 웹보다 넓은 범위에서의 확장된 사용이 가능해졌기 때문. 
자바스크립트 언어를 자바스크립트로 컴파일하는 방식. 타입스크립트의 구조와 큰 차이점이 없음


### TypeScript vs Javascript
**1) TypeScript**
자바스크립트의 단점을 보완하여 만들어진 언어 
* 핵심 차이점은 “Type”의 유무. 컴파일 과정에서 자료형을 한번 더 검사 
const a = 10 -> const a: number = 10
* 객체지향 컴파일 언어 -> 데이터 추상화 — 객체, 클래스 두 개념을 기반으로 함

**2) Javascript**
NodeJS 덕분에 과거의 한정적인 사용 범위에서 서버 개발까지 사용성이 확장됨.
매년 새로운 피쳐/기능이 추가되고 있음 

타입스크립트는 자바스크립트의 단점을 보완하여 (타입 추가, 컴파일 추가) 만든 언어이지만 
자바스크립트의 유연함(자바스크립트를 사용하는 새로운 프레임워크, 자바스크립트 언어 자체의 신규 기능 추가—예시: 데코레이트)
